model Order {
  id         BigInt @id @default(autoincrement())
  account_id BigInt

  payment_option String // PaymentGateway id, even COD
  payment_status Status   @default(Pending)
  address        String
  date_created   DateTime @default(now()) @db.Timestamptz(3)
  date_updated   DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  opt      ServiceOption @relation(fields: [payment_option], references: [id], onUpdate: Cascade, onDelete: NoAction)
  customer Customer      @relation(fields: [account_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  products OrderItem[]

  @@index([account_id])
  @@index([payment_option])
  @@map("base")
  @@schema("order")
}

model OrderItem {
  id              BigInt  @id @default(autoincrement())
  order_id        BigInt
  sku_id          BigInt
  confirmed_by_id BigInt? // VendorProfile id who confirmed this order, null if not confirmed yet
  shipment_id     BigInt
  note            String // Note for this item, e.g. "Please gift wrap this item"
  status          Status  @default(Pending)

  quantity BigInt

  serials   OrderItemSerial[]
  refund    Refund[]
  order     Order             @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sku       ProductSku        @relation(fields: [sku_id], references: [id], onUpdate: Cascade, onDelete: NoAction)
  shipment  Shipment          @relation(fields: [shipment_id], references: [id], onUpdate: Cascade, onDelete: NoAction)
  confirmer Vendor?           @relation(fields: [confirmed_by_id], references: [id], onUpdate: Cascade, onDelete: SetNull)

  //! @@unique([order_id, sku_id]); Should not be unique, because product can be added multiple times (due to product.can_combine)
  @@index([order_id])
  @@index([sku_id])
  @@map("item")
  @@schema("order")
}

model OrderItemSerial {
  id                BigInt @id @default(autoincrement())
  order_item_id     BigInt
  product_serial_id BigInt

  order_item OrderItem     @relation(fields: [order_item_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  serial     ProductSerial @relation(fields: [product_serial_id], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@unique([order_item_id, product_serial_id])
  @@map("item_serial")
  @@schema("order")
}

// enum PaymentMethod {
//   COD // Cash on Delivery
//   Card // Credit/Debit Card
//   BankTransfer // Bank Transfer (internal only)
//   Crypto // Cryptocurrency
//   Other // Other payment methods

//   @@map("payment_method")
//   @@schema("order")
// }

enum RefundMethod {
  PickUp
  DropOff

  @@map("refund_method")
  @@schema("order")
}

model Refund {
  id             BigInt  @id @default(autoincrement())
  order_item_id  BigInt
  reviewed_by_id BigInt? // VendorProfile id who reviewed this refund request, null if not reviewed yet
  shipment_id    BigInt?

  method       RefundMethod
  status       Status       @default(Pending)
  reason       String
  address      String? // PICK_UP address, if method is DROP_OFF, address is empty
  date_created DateTime     @default(now()) @db.Timestamptz(3)

  order_item      OrderItem       @relation(fields: [order_item_id], references: [id], onUpdate: Cascade, onDelete: NoAction)
  reviewer_vendor Vendor?         @relation(fields: [reviewed_by_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  shipment        Shipment?       @relation(fields: [shipment_id], references: [id], onUpdate: Cascade, onDelete: NoAction)
  disputes        RefundDispute[]

  @@index([order_item_id])
  @@index([reviewed_by_id])
  @@map("refund")
  @@schema("order")
}

// Complaint about refund request for vendor
model RefundDispute {
  id           BigInt @id @default(autoincrement())
  refund_id    BigInt // Refund id that this dispute belongs to
  issued_by_id BigInt // Vendor id who issued this dispute

  reason       String
  status       Status   @default(Pending)
  date_created DateTime @default(now()) @db.Timestamptz(3)
  date_updated DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  refund Refund @relation(fields: [refund_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  vendor Vendor @relation(fields: [issued_by_id], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([refund_id])
  @@index([issued_by_id])
  @@map("refund_dispute")
  @@schema("order")
}

enum InvoiceType {
  Sale // Regular sale invoice
  Service // Service invoice, e.g. warranty, installation, etc.
  Adjustment // Adjustment invoice, e.g. refund, credit note, etc.

  @@map("invoice_type")
  @@schema("order")
}

enum InvoiceRefType {
  Order
  Fee // TODO: create fee table

  @@map("invoice_ref_type")
  @@schema("order")
}

model Invoice {
  id       BigInt         @id @default(autoincrement())
  ref_type InvoiceRefType
  ref_id   BigInt // Reference id, e.g. Order.id

  type         InvoiceType
  receiver_id  BigInt // Customer, or Vendor id who receive this invoice
  note         String? // Optional note for the invoice
  data         Json        @db.JsonB // All fundamental informations for the invoice (e.g. customer data, items, promotions, applied promotions, etc.)
  file_rs_id   String // invoice file (PDF, etc.)
  date_created DateTime    @default(now()) @db.Timestamptz(3)

  hash      Bytes @unique @db.ByteA // Hash of the change log, used to prevent duplicate change logs
  prev_hash Bytes @db.ByteA // Hash of the previous change log, used to link change logs together. Can be empty for initial chain item

  account Account @relation(fields: [receiver_id], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@index([receiver_id])
  @@index([ref_type, ref_id])
  @@map("invoice")
  @@schema("order")
}

model Shipment {
  id            BigInt         @id @default(autoincrement())
  option        String // e.g. "ghn-standard", references ShipmentOption.id
  tracking_code String? // Carrier-provided tracking number
  status        ShipmentStatus @default(Pending)
  label_url     String? // For customer download/printing
  cost          BigInt
  date_eta      DateTime       @db.Timestamptz(3)
  from_address  String
  to_address    String
  weight_grams  Int
  length_cm     Int
  width_cm      Int
  height_cm     Int
  date_created  DateTime       @default(now()) @db.Timestamptz(3)

  items   OrderItem[]
  refunds Refund[]
  opt     ServiceOption @relation(fields: [option], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@map("shipment")
  @@schema("order")
}

enum ShipmentStatus {
  Pending
  LabelCreated
  InTransit
  OutForDelivery
  Delivered
  Failed
  Cancelled

  @@map("shipment_status")
  @@schema("order")
}
