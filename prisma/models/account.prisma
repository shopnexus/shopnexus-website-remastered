enum AccountType {
  Customer
  Vendor

  @@map("type")
  @@schema("account")
}

enum AccountStatus {
  Active
  Suspended

  @@map("status")
  @@schema("account")
}

enum Gender {
  Male
  Female
  Other

  @@map("gender")
  @@schema("account")
}

enum AddressType {
  Home
  Work

  @@map("address_type")
  @@schema("account")
}

model Account {
  id BigInt @id @default(autoincrement())

  type         AccountType
  status       AccountStatus @default(Active)
  phone        String?       @unique @db.VarChar(50)
  email        String?       @unique @db.VarChar(255)
  username     String?       @unique @db.VarChar(100)
  password     String?       @db.VarChar(255)
  date_created DateTime      @default(now()) @db.Timestamptz(3)
  date_updated DateTime      @default(now()) @updatedAt @db.Timestamptz(3)

  customer_profile Customer?
  vendor_profile   Vendor?
  profile          Profile?
  contacts         Contact[]
  // events           Event[]
  notifications    Notification[]
  comments         Comment[]
  invoices         Invoice[]
  upload_resources Resource[]     @relation("resource_upload_by")

  @@map("base")
  @@schema("account")
}

model Profile {
  id BigInt @id

  gender             Gender?
  name               String?   @db.VarChar(100)
  date_of_birth      DateTime? @db.Date
  avatar_rs_id       BigInt?   @unique // Resource id for avatar
  email_verified     Boolean   @default(false)
  phone_verified     Boolean   @default(false)
  default_contact_id BigInt?   @unique // Default contact id for this profile
  date_created       DateTime  @default(now()) @db.Timestamptz(3)
  date_updated       DateTime  @default(now()) @updatedAt @db.Timestamptz(3)

  contact Contact?  @relation(fields: [default_contact_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  account Account   @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  avatar  Resource? @relation("profile_avatar", fields: [avatar_rs_id], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@map("profile")
  @@schema("account")
}

model Customer {
  id           BigInt   @id
  date_created DateTime @default(now()) @db.Timestamptz(3)
  date_updated DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  account         Account       @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders          Order[]
  CartItem        CartItem[]
  UserInteraction Interaction[]

  @@map("customer")
  @@schema("account")
}

model Vendor {
  id BigInt @id

  description String @default("") @db.VarChar(255)

  account          Account         @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spus             ProductSpu[]
  refunds          Refund[]
  refund_disputes  RefundDispute[]
  promotions       Promotion[]
  income_histories IncomeHistory[]
  confirmed_items  OrderItem[] // Items confirmed by this vendor

  @@index([id])
  @@map("vendor")
  @@schema("account")
}

model IncomeHistory {
  id         BigInt @id @default(autoincrement())
  account_id BigInt // Only vendor

  type            String   @db.VarChar(50) // e.g. sale, refund, commission, payout
  income          BigInt // in USD (+/-)
  current_balance BigInt // in USD after this transaction
  note            String?  @db.VarChar(100)
  date_created    DateTime @default(now()) @db.Timestamptz(3)

  hash      Bytes @unique @db.ByteA // Hash of the change log, used to prevent duplicate change logs
  prev_hash Bytes @db.ByteA // Hash of the previous change log, used to link change logs together. Can be empty for initial chain item

  account Vendor @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@index([account_id])
  @@index([type])
  @@index([date_created])
  @@map("income_history")
  @@schema("account")
}

model Notification {
  id         BigInt @id @default(autoincrement())
  account_id BigInt

  type    String @db.VarChar(50) // e.g. email, sms, push
  channel String @db.VarChar(50) // e.g. order_update, promotion, system_alert

  is_read        Boolean   @default(false)
  content        String    @db.Text
  date_created   DateTime  @default(now()) @db.Timestamptz(3)
  date_updated   DateTime  @default(now()) @updatedAt @db.Timestamptz(3)
  date_sent      DateTime? @db.Timestamptz(3)
  date_scheduled DateTime? @db.Timestamptz(3) // If scheduled for later

  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@index([account_id])
  @@index([type])
  @@index([channel])
  @@index([date_created])
  @@map("notification")
  @@schema("account")
}

// TODO: hold the item quantity in the product stock (stock -= quantity), after 1h of inactivity, free the item stock in the product stock (stock += quantity)
model CartItem {
  id      BigInt @id @default(autoincrement())
  cart_id BigInt // is account_id (CustomerProfile.id)
  sku_id  BigInt

  quantity     BigInt
  date_created DateTime @default(now()) @db.Timestamptz(3)
  date_updated DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  customer Customer   @relation(fields: [cart_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sku      ProductSku @relation(fields: [sku_id], references: [id], onUpdate: Cascade, onDelete: NoAction)

  @@unique([cart_id, sku_id])
  @@index([cart_id])
  @@index([sku_id])
  @@map("cart_item")
  @@schema("account")
}

model Contact {
  id         BigInt @id @default(autoincrement())
  account_id BigInt

  full_name      String      @db.VarChar(100)
  phone          String      @db.VarChar(30)
  phone_verified Boolean     @default(false) // If true, phone number is verified; if the phone same as account phone, then it is verified by default
  address        String      @db.VarChar(255) // Full address
  address_type   AddressType

  date_created DateTime @default(now()) @db.Timestamptz(3)
  date_updated DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  account Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  profile Profile?

  @@index([account_id])
  @@map("contact")
  @@schema("account")
}
