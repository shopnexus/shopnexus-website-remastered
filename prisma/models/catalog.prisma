model Brand {
  id          BigInt @id @default(autoincrement())
  code        String @unique
  name        String
  description String

  spus ProductSpu[]

  @@map("brand")
  @@schema("catalog")
}

model ProductCategory {
  id          BigInt  @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String
  parent_id   BigInt? // If null, this is a root category

  spus ProductSpu[]

  @@index([parent_id])
  @@map("category")
  @@schema("catalog")
}

// model ProductSpec {
//   id   BigInt @id @default(autoincrement())
//   name String @unique @db.VarChar(100) // Name of the specification, e.g. weight, dimension, etc.
//   unit String @db.VarChar(50) // Unit of the specification, e.g. kg, cm, etc.
// }

// TODO: add product specifications, e.g. weight, dimension, color, size, material, etc.
// model ProductSpuSpec {
//   id     BigInt @id @default(autoincrement())
//   spu_id BigInt
//
//   name         String   @db.VarChar(100) // Name of the specification, e.g. weight, dimension, etc.
//   value        String   @db.VarChar(255) // Value of the specification, can be JSON string if needed
//   date_created DateTime @default(now()) @db.Timestamptz(3)
//   date_updated DateTime @default(now()) @updatedAt @db.Timestamptz(3)
//
//   spu ProductSpu @relation(fields: [spu_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
//
//   @@index([spu_id])
//   @@index([name])
//   @@map("product_spu_spec")
//   @@schema("catalog")
// }

// Important data, only allow update name/description
model ProductSpu {
  id              BigInt  @id @default(autoincrement())
  code            String  @unique
  account_id      BigInt // Vendor account only
  category_id     BigInt
  brand_id        BigInt
  featured_sku_id BigInt? @unique // If not null, this SKU is the featured SKU for this product

  name              String
  description       String
  is_active         Boolean
  date_created      DateTime  @default(now()) @db.Timestamptz(3)
  date_updated      DateTime  @default(now()) @updatedAt @db.Timestamptz(3)
  date_deleted      DateTime? @db.Timestamptz(3) // If not null, this product model is deleted, but still can be used for historical purposes

  vendor   Vendor          @relation(fields: [account_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category ProductCategory @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  brand    Brand           @relation(fields: [brand_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tags     ProductTag[]
  products ProductSku[]

  // specs    ProductSpuSpec[]
  @@index([account_id])
  @@index([category_id])
  @@index([brand_id])
  @@map("product_spu")
  @@schema("catalog")
}

model ProductSku {
  id     BigInt @id @default(autoincrement())
  spu_id BigInt

  price        BigInt // Price of the item at this time
  can_combine  Boolean // If true, allow customer to (put many products together inside one container), otherwise each product is a single item (for refunding stuff)
  attributes   Json      @db.JsonB // Key-value pairs of attributes, e.g. color: red, size: M, etc.
  date_created DateTime  @default(now()) @db.Timestamptz(3)
  date_deleted DateTime? @db.Timestamptz(3) // If not null, this product model is deleted, but still can be used for historical purposes

  spu         ProductSpu      @relation(fields: [spu_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  serials     ProductSerial[]
  carts       CartItem[]
  order_items OrderItem[]

  @@index([spu_id])
  @@map("product_sku")
  @@schema("catalog")
}

model Tag {
  id          BigInt @id @default(autoincrement())
  tag         String @unique @db.VarChar(50)
  description String

  spuTags ProductTag[]

  @@map("tag")
  @@schema("catalog")
}

model ProductTag {
  id     BigInt @id @default(autoincrement())
  spu_id BigInt
  tag_id BigInt

  spu ProductSpu @relation(fields: [spu_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag Tag        @relation(fields: [tag_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([spu_id, tag_id])
  @@index([spu_id])
  @@index([tag_id])
  @@map("product_spu_tag")
  @@schema("catalog")
}

enum CommentRefType {
  ProductSpu
  Comment

  @@map("comment_ref_type")
  @@schema("catalog")
}

model Comment {
  id         BigInt @id @default(autoincrement())
  account_id BigInt

  ref_type CommentRefType
  ref_id   BigInt

  body         String
  upvote       BigInt   @default(0)
  downvote     BigInt   @default(0)
  score        Int // 0 ~ 100
  date_created DateTime @default(now()) @db.Timestamptz(3)
  date_updated DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  account Account @relation(fields: [account_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("comment")
  @@schema("catalog")
}
